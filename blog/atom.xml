<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/blog</id>
    <title>QuicFrameWork Blog</title>
    <updated>2024-07-26T08:54:58.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://github.com/blog"/>
    <subtitle>QuicFrameWork Blog</subtitle>
    <icon>https://github.com/img/quicframe.ico</icon>
    <entry>
        <title type="html"><![CDATA[Handler]]></title>
        <id>https://github.com/blog/Handler</id>
        <link href="https://github.com/blog/Handler"/>
        <updated>2024-07-26T08:54:58.000Z</updated>
        <summary type="html"><![CDATA[用于处理HTTP请求并写入响应]]></summary>
        <content type="html"><![CDATA[<p>用于处理HTTP请求并写入响应</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="对应函数">对应函数:<a class="hash-link" aria-label="Direct link to 对应函数:" title="Direct link to 对应函数:" href="https://github.com/blog/Handler#%E5%AF%B9%E5%BA%94%E5%87%BD%E6%95%B0">​</a></h2>
<blockquote>
<p>普通路由注册</p>
</blockquote>
<p><strong>*Server.AddHttpHandler(path, HttpMethod string, handler RouteDisPatch.HttpHandle)</strong></p>
<blockquote>
<p>参数路由注册(参数默认位置在请求体/请求头)</p>
<p>也有更方便的方式，请查看下文的feature</p>
</blockquote>
<p><strong>*Server.AddBodyParamHandler(path, HttpMethod string, param interface{}, handler RouteDisPatch.HttpHandle)</strong></p>
<p><strong>*Server.AddHeaderParamHandler(path, HttpMethod string, param interface{}, handler RouteDisPatch.HttpHandle)</strong></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="参数说明">参数说明:<a class="hash-link" aria-label="Direct link to 参数说明:" title="Direct link to 参数说明:" href="https://github.com/blog/Handler#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="path">path<a class="hash-link" aria-label="Direct link to path" title="Direct link to path" href="https://github.com/blog/Handler#path">​</a></h3>
<p>绑定的http请求路径
请求值可以为:</p>
<ol>
<li>正常字符串:</li>
</ol>
<blockquote>
<p>如<code>/helloWorld</code>,匹配的就是访问<code>https://{basURL}/helloWorld</code>的请求</p>
</blockquote>
<ol start="2">
<li>通配符*或**</li>
</ol>
<p>*匹配当前一级的所有目录</p>
<p>**匹配当前目录下的所有请求</p>
<blockquote>
<p>如<code>/user/role/*/userData</code>匹配的就是访问如:</p>
<p><code>https://{basURL}/user/role/1/userData</code></p>
<p><code>https://{basURL}/user/role/2/userData</code></p>
<p>的所有请求</p>
</blockquote>
<blockquote>
<p>如<code>/user/role/**</code>匹配的就是访问如:</p>
<p><code>https://{basURL}/user/role/abc</code></p>
<p><code>https://{basURL}/user/role/dc/userData</code></p>
<p>的所有请求</p>
</blockquote>
<ol start="3">
<li>规则请求</li>
</ol>
<p>类似于:<code>{name(string):step(uint)}</code>
例子:</p>
<blockquote>
<p><code>/user/{userName:1}</code></p>
<p><code>/userName/{fullName:2}</code></p>
</blockquote>
<p>对应匹配的请求路径:</p>
<blockquote>
<p><code>/user/ben</code></p>
<p><code>/userName/Alice/Center</code></p>
</blockquote>
<blockquote>
<p><strong>注意:</strong> 推荐和param，参数路由注册一起使用</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="httpmethod">HttpMethod<a class="hash-link" aria-label="Direct link to HttpMethod" title="Direct link to HttpMethod" href="https://github.com/blog/Handler#httpmethod">​</a></h3>
<p>Http请求方法，和http规范中的请求方法同步，推荐直接使用</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">http</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Methodxxx</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>进行声明</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="param">param<a class="hash-link" aria-label="Direct link to param" title="Direct link to param" href="https://github.com/blog/Handler#param">​</a></h3>
<p>参数路由必填参数，必须是结构体指针(如欲使用自动注入请求参数的话)</p>
<p>对应函数</p>
<p>默认参数在请求体中</p>
<p><strong>*Server.AddBodyParamHandler(path, HttpMethod string, param interface{}, handler RouteDisPatch.HttpHandle)</strong></p>
<p>参数默认在请求头中</p>
<p><strong>*Server.AddHeaderParamHandler(path, HttpMethod string, param interface{}, handler RouteDisPatch.HttpHandle)</strong></p>
<p>设计初衷:</p>
<p>在开发中经常会有一个接口参数会来自如下地方:</p>
<ol>
<li>请求头拿到token/其他权限相关数据</li>
<li>请求体中拿到实际请求的数据</li>
<li>请求path中拿到id等相关的路径信息(结合path中的规则请求使用)</li>
</ol>
<p>导致可能一个很简单的接口，需要从三个不同的地方分别解析得到数据，所以，本框架将这三个地方的数据都进行一个处理，只需开发者注册路由时调用一个不同的注册函数即可在HttpHandle主体处理函数拿到对应的数据</p>
<p>对于param结构体没有太多的要求，如果是调用AddBodyParamHandler进行注册的话，则请求会从请求的Form表单获取数据，如果是AddHeaderParamHandler的话，请求会从请求头中拿取数据</p>
<p>但请注意，如果是需要从请求头/Form表单拿取数据的话，那么结构体中不能再嵌套结构体，并且类型只能是golang的基础数据类型，不然会注入失败(json数据不受单层结构体的限制，AddBodyParamHandler和AddHeaderParamHandler均可注入成功)</p>
<blockquote>
<p>额外说明</p>
</blockquote>
<p>如果是既有formData/headerData的情况，可以使用结构体注释来标注,目前的注释结构如下:</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	locationTag  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"quickLoc"</span><span class="token plain">     </span><span class="token comment" style="color:#999988;font-style:italic">//参数位置在哪</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	defaultValue </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"quickDefault"</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">//参数默认值</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	param        </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"quickParam"</span><span class="token plain">   </span><span class="token comment" style="color:#999988;font-style:italic">//参数对应的param名字，类似于 `json:"name"`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	header   </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"header"</span><span class="token plain">	</span><span class="token comment" style="color:#999988;font-style:italic">// http请求头传参</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	body     </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"body"</span><span class="token plain">	</span><span class="token comment" style="color:#999988;font-style:italic">//Body传参(目前暂时未做对应操作)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	reqParam </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"param"</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">//param传参,类似于www.baidu.com?name=Baidu</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>举个例子:</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token string" style="color:#e3116c">"fmt"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"github.com/wangshiben/QuicFrameWork/server"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"github.com/wangshiben/QuicFrameWork/server/RouteDisPatch"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"github.com/wangshiben/QuicFrameWork/server/RouteHand"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"net/http"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> TestStruct </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	Name         </span><span class="token builtin">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	RequestParam </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">`quickLoc:"param"`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	Header       </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">`quickLoc:"header"`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	Age          </span><span class="token builtin">int</span><span class="token plain">    </span><span class="token string" style="color:#e3116c">`quickLoc:"param"`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token comment" style="color:#999988;font-style:italic">//可信的证书</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	newServer </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> server</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NewServer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"cert.pem"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"cert.key"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">":4445"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	newServer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">AddBodyParamHandler</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/temp/**"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> http</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">MethodPost</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">TestStruct</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">w http</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ResponseWriter</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> r </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">RouteDisPatch</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Request</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		testStruct </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> r</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Param</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">TestStruct</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">testStruct</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="httphandle">HttpHandle<a class="hash-link" aria-label="Direct link to HttpHandle" title="Direct link to HttpHandle" href="https://github.com/blog/Handler#httphandle">​</a></h3>
<p>处理函数，对于经过Filter过滤的请求进行实际处理</p>
<p>函数具体格式如下:</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">w http</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ResponseWriter</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> r </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">RouteDisPatch</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Request</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol>
<li>http.ResponseWriter:</li>
</ol>
<p>就是net/http包中的ResponseWriter，可直接使用其相应参数</p>
<ol start="2">
<li>RouteDisPatch.Request:</li>
</ol>
<p>内封装了两个参数<!-- -->:http<!-- -->.Request和Param interface{}</p>
<p>http.Request就是net/http包中原生的http.Request,Param interface{}就是在调用AddBodyParamHandler或AddHeaderParamHandler中的Param使用时，需要对其强制转换一下,如果不想手写强制转换，推荐使用下面feature的功能</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="feature还未严格测试如有bug请及时反馈">feature(还未严格测试，如有bug请及时反馈)<a class="hash-link" aria-label="Direct link to feature(还未严格测试，如有bug请及时反馈)" title="Direct link to feature(还未严格测试，如有bug请及时反馈)" href="https://github.com/blog/Handler#feature%E8%BF%98%E6%9C%AA%E4%B8%A5%E6%A0%BC%E6%B5%8B%E8%AF%95%E5%A6%82%E6%9C%89bug%E8%AF%B7%E5%8F%8A%E6%97%B6%E5%8F%8D%E9%A6%88">​</a></h2>
<p>主要是简化自动注入流程，不需要开发人员手动强制转换类型</p>
<blockquote>
<p>可以移步至源码查看，主要是调用之前新增了一次强制转换:
<a href="https://github.com/wangshiben/QuicFrameWork/blob/master/server/RouteHand/routAdd.go" target="_blank" rel="noopener noreferrer">https://github.com/wangshiben/QuicFrameWork/blob/master/server/RouteHand/routAdd.go</a></p>
<p>没有文档是因为可能随时都在变</p>
</blockquote>
<p>调用示例:</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token string" style="color:#e3116c">"fmt"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"github.com/wangshiben/QuicFrameWork/server"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"github.com/wangshiben/QuicFrameWork/server/RouteDisPatch"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"github.com/wangshiben/QuicFrameWork/server/RouteHand"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"net/http"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> TestStruct </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	Name         </span><span class="token builtin">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	RequestParam </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">`quickLoc:"param"`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	Header       </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">`quickLoc:"header"`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	Age          </span><span class="token builtin">int</span><span class="token plain">    </span><span class="token string" style="color:#e3116c">`quickLoc:"param"`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token comment" style="color:#999988;font-style:italic">//可信的证书</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	newServer </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> server</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NewServer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"cert.pem"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"cert.key"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">":4445"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RouteHand</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">PostAutowired</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">newServer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/mmm/bck/**"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">q </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">RouteHand</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">QuickFrameWork</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">TestStruct</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		param </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> q</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Param</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">param</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HttpFilter]]></title>
        <id>https://github.com/blog/HttpFilter</id>
        <link href="https://github.com/blog/HttpFilter"/>
        <updated>2024-07-26T08:54:58.000Z</updated>
        <summary type="html"><![CDATA[其实对于Filter也好，Middleware也罢，他们的基本流程的都是一样的，都是在Handler处理HTTP请求之前对Http请求进行一个预操作，但两者的区别主要还是在使用面向的对象上]]></summary>
        <content type="html"><![CDATA[<p>其实对于Filter也好，Middleware也罢，他们的基本流程的都是一样的，都是在Handler处理HTTP请求之前对Http请求进行一个预操作，但两者的区别主要还是在使用面向的对象上</p>
<p>Filter注重于在某个http请求的Path之前进行调用，换句话说，它专注在http的Path进行匹配和处理</p>
<p>Middleware注重于在执行代码/函数之前进行调用，可复用程度广，但容易造成一些可读性的问题</p>
<p>所以本框架为了保证开发人员的轻量化开发，采用的是Filter式的请求拦截策略</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="涉及函数">涉及函数:<a class="hash-link" aria-label="Direct link to 涉及函数:" title="Direct link to 涉及函数:" href="https://github.com/blog/HttpFilter#%E6%B6%89%E5%8F%8A%E5%87%BD%E6%95%B0">​</a></h2>
<p><strong>*Server.AddFilter(path string, filter RouteDisPatch.HttpFilter)</strong></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="参数说明">参数说明<a class="hash-link" aria-label="Direct link to 参数说明" title="Direct link to 参数说明" href="https://github.com/blog/HttpFilter#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="path">path<a class="hash-link" aria-label="Direct link to path" title="Direct link to path" href="https://github.com/blog/HttpFilter#path">​</a></h3>
<p>绑定的http拦截器的路径
请求值可以为:</p>
<ol>
<li>正常字符串:</li>
</ol>
<blockquote>
<p>如<code>/helloWorld</code>,匹配的就是访问<code>https://{basURL}/helloWorld</code>的请求</p>
</blockquote>
<ol start="2">
<li>通配符*或**</li>
</ol>
<p>*拦截当前一级的所有目录</p>
<p>**拦截当前目录下的所有请求</p>
<blockquote>
<p>如<code>/user/role/*/userData</code>拦截的就是访问如:</p>
<p><code>https://{basURL}/user/role/1/userData</code></p>
<p><code>https://{basURL}/user/role/2/userData</code></p>
<p>的所有请求</p>
</blockquote>
<blockquote>
<p>如<code>/user/role/**</code>拦截的就是访问如:</p>
<p><code>https://{basURL}/user/role/abc</code></p>
<p><code>https://{basURL}/user/role/dc/userData</code></p>
<p>的所有请求</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="httpfilter">HttpFilter<a class="hash-link" aria-label="Direct link to HttpFilter" title="Direct link to HttpFilter" href="https://github.com/blog/HttpFilter#httpfilter">​</a></h3>
<p>拦截函数，对于每个http请求进行链式调用和处理</p>
<p>函数具体格式如下:</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">w http</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ResponseWriter</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> r </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">RouteDisPatch</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Request</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> next RouteDisPatch</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Next</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>其中<code>http.ResponseWriter</code>是golang原生<code>net/http``包中的ResponseWriter</code></p>
<p><code>RouteDisPatch.Request</code>是对golang原生<code>net/http</code>包进行了一层封装，具体的可查看Handler中的定义</p>
<p><code>RouteDisPatch.Next</code>是拦截器的链式调用:</p>
<p>在一个具体路径上，如<code>/name/age/id</code>的实际请求上，可能会有如下path的拦截器:
<code>/name/**</code>,<code>/name/age/**</code>,<code>/name/age/id</code>，那么，这一系列的拦截器加<code>Handler</code>函数就构成了一套完整的请求链，排列方式是:父级路径的拦截器在前，子级拦截器的路径在后，最后才是对应路径的<code>Handler</code>函数</p>
<p>拦截器执行下一步是调用next函数，将<code>http.ResponseWriter</code>, <code>RouteDisPatch.Request</code>传递下去即可，框架在执行到末端时会自动调用Handler</p>
<p>示例:</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token string" style="color:#e3116c">"fmt"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"github.com/wangshiben/QuicFrameWork/server"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"github.com/wangshiben/QuicFrameWork/server/RouteDisPatch"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"github.com/wangshiben/QuicFrameWork/server/RouteHand"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"net/http"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token comment" style="color:#999988;font-style:italic">//可信的证书</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	newServer </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> server</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NewServer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"cert.pem"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"cert.key"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">":4445"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	newServer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">AddFilter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/test/**"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">w http</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ResponseWriter</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> r </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">RouteDisPatch</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Request</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> next RouteDisPatch</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Next</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"拦截到了请求"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		next</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">w</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> r</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"拦截请求结束"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="cros跨域配置">CROS(跨域配置)<a class="hash-link" aria-label="Direct link to CROS(跨域配置)" title="Direct link to CROS(跨域配置)" href="https://github.com/blog/HttpFilter#cros%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE">​</a></h2>
<p>这部分感谢<a href="https://github.com/tiansuo114" target="_blank" rel="noopener noreferrer">@tiansuo114</a>进行开发测试</p>
<p>主要函数:</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> CORSConfig </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token comment" style="color:#999988;font-style:italic">//均为http协议中Access-Control-xxx的响应头</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	AllowOrigins     </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token comment" style="color:#999988;font-style:italic">//允许的源</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	AllowMethods     </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token comment" style="color:#999988;font-style:italic">//允许的请求方法</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	AllowHeaders     </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token comment" style="color:#999988;font-style:italic">//允许的请求头</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	AllowCredentials </span><span class="token builtin">bool</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">//允许凭证</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	ExposeHeaders    </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token comment" style="color:#999988;font-style:italic">//允许前端JS访问的响应头</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	MaxAge           </span><span class="token builtin">int</span><span class="token comment" style="color:#999988;font-style:italic">//最大存活时间</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">*</span><span class="token plain">Server</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">CROS</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">path </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> cconf </span><span class="token operator" style="color:#393A34">...</span><span class="token plain">cors</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">CORSConfig</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="参数说明-1">参数说明:<a class="hash-link" aria-label="Direct link to 参数说明:" title="Direct link to 参数说明:" href="https://github.com/blog/HttpFilter#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-1">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="path-1">path<a class="hash-link" aria-label="Direct link to path" title="Direct link to path" href="https://github.com/blog/HttpFilter#path-1">​</a></h4>
<p>同上述的HttpFilter</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="corsconfig">CORSConfig<a class="hash-link" aria-label="Direct link to CORSConfig" title="Direct link to CORSConfig" href="https://github.com/blog/HttpFilter#corsconfig">​</a></h4>
<p>跨域配置信息，可查看上述注释</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="用法">用法:<a class="hash-link" aria-label="Direct link to 用法:" title="Direct link to 用法:" href="https://github.com/blog/HttpFilter#%E7%94%A8%E6%B3%95">​</a></h3>
<p>若没有特殊要求，则推荐直接使用如下方式进行跨域配置:</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">		</span><span class="token string" style="color:#e3116c">"fmt"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"github.com/wangshiben/QuicFrameWork/server"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"github.com/wangshiben/QuicFrameWork/server/RouteDisPatch"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"github.com/wangshiben/QuicFrameWork/server/RouteHand"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token string" style="color:#e3116c">"net/http"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	</span><span class="token comment" style="color:#999988;font-style:italic">//可信的证书</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	newServer </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> server</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NewServer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"cert.pem"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"cert.key"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">":4445"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">	newServer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">CROS</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/**"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<p>当时设计此函数时，因为golang没有多态这个概念，所以使用了参数切片来进行伪多态，如果有特殊需求的话，只需要传递一个CROSConfig即可，传多个Config默认启用第一个</p>
</blockquote>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[API文档]]></title>
        <id>https://github.com/blog/README</id>
        <link href="https://github.com/blog/README"/>
        <updated>2024-07-26T08:54:58.000Z</updated>
        <summary type="html"><![CDATA[更快的传输，更轻量化开发]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>更快的传输，更轻量化开发</p>
</blockquote>
<p>整个框架对外提供函数只有如下部分:</p>
<ol>
<li>处理器(Handler)</li>
</ol>
<p>用于处理http请求</p>
<ol start="2">
<li>拦截器/中间件(Filter)</li>
</ol>
<p>用于在http请求之前对请求进行拦截处理</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Server]]></title>
        <id>https://github.com/blog/Server</id>
        <link href="https://github.com/blog/Server"/>
        <updated>2024-07-26T08:54:58.000Z</updated>
        <summary type="html"><![CDATA[Server包作为整个服务的提供者和启动入口，这里的Server指的是程序启动和初始化相关的函数API]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>Server包作为整个服务的提供者和启动入口，这里的Server指的是程序启动和初始化相关的函数API</p>
</blockquote>
<p>目前Server提供了两个启动方式:</p>
<ol>
<li>基于TLS证书启动，https访问</li>
<li>Http启动(还在测试中，属于feature功能)</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="tls启动">TLS启动:<a class="hash-link" aria-label="Direct link to TLS启动:" title="Direct link to TLS启动:" href="https://github.com/blog/Server#tls%E5%90%AF%E5%8A%A8">​</a></h2>
<p>相关函数:</p>
<p>初始化Server:<strong>server.NewServer(TLSPem, TLSKey, port string)</strong></p>
<p>启动Server:<strong>*Server.StartServer()</strong></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="参数说明">参数说明:<a class="hash-link" aria-label="Direct link to 参数说明:" title="Direct link to 参数说明:" href="https://github.com/blog/Server#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="tslpem和tlskey">TSLPem和TLSKey<a class="hash-link" aria-label="Direct link to TSLPem和TLSKey" title="Direct link to TSLPem和TLSKey" href="https://github.com/blog/Server#tslpem%E5%92%8Ctlskey">​</a></h4>
<p>TSL证书的pem和key文件路径，可以是相对路径也可以是绝对路径，如果没有值则传""即可(空值为默认自动生成证书，生成自签名证书)</p>
<blockquote>
<p><strong>注意</strong> TSLPem和TLSKey必须同时传，不能只传一个，否则会启动失败</p>
</blockquote>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="port">port<a class="hash-link" aria-label="Direct link to port" title="Direct link to port" href="https://github.com/blog/Server#port">​</a></h4>
<p>监听的端口号，格式为: <code>:number</code>，会占用目标端口的TCP和UDP端口，请提前开启目标端口的防火墙，以免接收不到包</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="http启动">Http启动<a class="hash-link" aria-label="Direct link to Http启动" title="Direct link to Http启动" href="https://github.com/blog/Server#http%E5%90%AF%E5%8A%A8">​</a></h2>
<p>初始化Server:<strong>server.NewHttpServer(port string)</strong></p>
<p>启动HttpServer:<strong>*Server.StartHttpSerer()</strong></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="参数说明-1">参数说明:<a class="hash-link" aria-label="Direct link to 参数说明:" title="Direct link to 参数说明:" href="https://github.com/blog/Server#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E-1">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="port-1">port<a class="hash-link" aria-label="Direct link to port" title="Direct link to port" href="https://github.com/blog/Server#port-1">​</a></h4>
<p>监听的端口号，格式为: <code>:number</code>，会占用目标端口的TCP端口，请提前开启目标端口的防火墙，以免接收不到包</p>]]></content>
    </entry>
</feed>